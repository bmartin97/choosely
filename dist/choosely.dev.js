module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Choosely; });\nfunction createElementFromHTML(htmlString) {\n  var div = document.createElement('div');\n  div.innerHTML = htmlString.trim(); // Change this to div.childNodes to support multiple top-level nodes\n\n  return div.firstChild;\n}\n\nfunction createAttributesFromObject(attrObject) {\n  return Object.values(attrObject).map(value => `${value.nodeName}=\"${value.nodeValue}\"`).join(' ');\n}\n\nfunction createAttributesFromAttributeList(attrObject, attrArray) {\n  return Object.values(attrObject).map(value => {\n    if (attrArray.includes(value.nodeName)) {\n      return `${value.nodeName}=\"${value.nodeValue}\"`;\n    }\n  }).join(' ');\n}\n\nclass Choosely {\n  constructor({\n    selector = undefined,\n    target = undefined,\n    searchable = false,\n    inheritAttributes = false,\n    enableArrowNavigation = true,\n    on = {}\n  }) {\n    if (on.Init) {\n      if (typeof on.Init === 'function') {\n        this.onInit = on.Init;\n      } else {\n        console.warn(`on Init property is not a function!`);\n\n        this.onInit = function () {};\n      }\n    } else {\n      this.onInit = function () {};\n    }\n\n    if (on.Open) {\n      if (typeof on.Open === 'function') {\n        this.onOpen = on.Open;\n      } else {\n        console.warn(`on Open property is not a function!`);\n\n        this.onOpen = function () {};\n      }\n    } else {\n      this.onOpen = function () {};\n    }\n\n    if (on.Close) {\n      if (typeof on.Close === 'function') {\n        this.onClose = on.Close;\n      } else {\n        console.warn(`on Close property is not a function!`);\n\n        this.onClose = function () {};\n      }\n    } else {\n      this.onClose = function () {};\n    }\n\n    if (on.Select) {\n      if (typeof on.Select === 'function') {\n        this.onSelect = on.Select;\n      } else {\n        console.warn(`on Select property is not a function!`);\n\n        this.onSelect = function () {};\n      }\n    } else {\n      this.onSelect = function () {};\n    }\n\n    this.state = {\n      _selected: null,\n\n      set Selected(new_selected) {\n        this._selected = new_selected;\n      },\n\n      get Selected() {\n        return this._selected;\n      },\n\n      _options: [],\n\n      set Options(new_options) {\n        this._options = new_options;\n      },\n\n      get Options() {\n        return this._options;\n      },\n\n      _filteredOptions: [],\n\n      set FilteredOptions(value) {\n        this._filteredOptions = value;\n        console.log('work', this);\n        this.RefreshOptions();\n      },\n\n      get FilteredOptions() {\n        return this._filteredOptions;\n      },\n\n      _isOpened: false,\n\n      set IsOpened(value) {\n        this._isOpened = value;\n      },\n\n      get IsOpened() {\n        return this._isOpened;\n      }\n\n    };\n    Object.defineProperty(this.state, 'FilteredOptions', {\n      set: function (value) {\n        this.state._filteredOptions = value;\n        this.RefreshOptions();\n      }.bind(this)\n    });\n\n    try {\n      const _sourceElement = document.querySelector(selector);\n\n      if (_sourceElement) {\n        this.sourceElement = _sourceElement;\n      } else {\n        throw new Error(`Source element doesn't exist. Selector: ${selector}`);\n      } // Select target HTML Element\n\n\n      if (target) {\n        const _targetElement = document.querySelector(target);\n\n        if (_targetElement) {\n          this.targetElement = _targetElement;\n        } else {\n          throw new Error(`Target element doesn't exist. Selector: ${target}`);\n        }\n      } else {\n        const _targetElement = this.sourceElement.parentElement;\n\n        if (_targetElement) {\n          this.targetElement = _targetElement;\n        } else {\n          throw new Error(`Source element doesn't have parent elements. Please define target element.`);\n        }\n      } // Render choosely\n\n\n      const options = this.sourceElement.querySelectorAll('option');\n\n      const renderOptions = () => {\n        if (inheritAttributes) {\n          if (typeof inheritAttributes === 'object' && Array.isArray(inheritAttributes)) {\n            // Array\n            return Array.from(options).map(_option => {\n              const text = _option.innerText;\n\n              const _clone = _option.cloneNode();\n\n              _clone.classList.add('choosely-option');\n\n              const attributes = _clone.attributes;\n              return `<div ${createAttributesFromAttributeList(attributes, inheritAttributes)} ${!inheritAttributes.includes('class') ? 'class=\"choosely-option\"' : ''}>${text}</div>`;\n            });\n          } else if (typeof inheritAttributes === 'boolean') {\n            // True\n            return Array.from(options).map(_option => {\n              const text = _option.innerText;\n\n              const _clone = _option.cloneNode();\n\n              _clone.classList.add('choosely-option');\n\n              const attributes = _clone.attributes;\n              return `<div ${createAttributesFromObject(attributes)} >${text}</div>`;\n            });\n          } else {\n            // Invalid type\n            throw new Error(`Invalid type for inheritAttributes property.`);\n          }\n        } else {\n          // False\n          return Array.from(options).map(_option => {\n            const text = _option.innerText;\n            return `<div class=\"choosely-option\">${text}</div>`;\n          });\n        }\n      };\n\n      const html = `\n                <div class=\"choosely-select\">\n                    <div class=\"choosely-selected\">\n                        ${options[0].innerText}\n                    </div>\n                    <div class=\"choosely-option-container\">\n                        ${searchable ? `\n                            <div class=\"choosely-search\">\n                                <input type=\"search\" autocomplete=\"off\">\n                            </div>` : ``}\n                        <div class=\"choosely-options\">\n                            ${renderOptions().join('')}\n                        </div>\n                    </div>\n                </div >\n                `;\n\n      const _element = createElementFromHTML(html);\n\n      this.targetElement.appendChild(_element);\n      this.chooselyElement = _element;\n      this.state.Selected = _element.querySelector('.choosely-selected');\n      this.state.Options = _element.querySelectorAll('.choosely-option');\n      this.state.Options[0].classList.add('choosely-selected-option');\n      this.chooselyOptionsElement = _element.querySelector('.choosely-option-container .choosely-options');\n      this.state.Selected.addEventListener('click', () => {\n        if (this.IsOpened) {\n          this.Close();\n        } else {\n          this.Open();\n        }\n      });\n      this.state.Options.forEach(_option => {\n        _option.addEventListener('click', () => {\n          this.Select(_option);\n          this.Close();\n        });\n      });\n      window.addEventListener('click', evt => {\n        if (this.IsOpened && !this.chooselyElement.contains(evt.target)) {\n          this.Close();\n        }\n      });\n      this.state._filteredOptions = this.state.Options;\n\n      if (searchable) {\n        const searchElement = this.chooselyElement.querySelector('.choosely-search > input');\n        searchElement.addEventListener('input', event => {\n          const keyword = event.target.value;\n          this.state.FilteredOptions = Array.from(this.state.Options).filter(_option => _option.innerText.toLowerCase().includes(keyword.toLowerCase()));\n        });\n      }\n\n      if (enableArrowNavigation) {\n        document.addEventListener('keydown', event => {\n          if (this.IsOpened) {\n            if (event.which === 40) {\n              // Down arrow\n              const indexOfSelectedOption = Array.from(this.state.FilteredOptions).findIndex(_option => _option.classList.contains('choosely-selected-option'));\n\n              if (0 <= indexOfSelectedOption && indexOfSelectedOption < this.state.FilteredOptions.length - 1) {\n                this.state.FilteredOptions[indexOfSelectedOption].classList.remove('choosely-selected-option');\n                this.state.FilteredOptions[indexOfSelectedOption + 1].classList.add('choosely-selected-option');\n                this.Select(this.state.FilteredOptions[indexOfSelectedOption + 1]);\n              }\n            } else if (event.which === 38) {\n              // Up arrow\n              const indexOfSelectedOption = Array.from(this.state.FilteredOptions).findIndex(_option => _option.classList.contains('choosely-selected-option'));\n\n              if (1 <= indexOfSelectedOption && indexOfSelectedOption < this.state.FilteredOptions.length) {\n                this.state.FilteredOptions[indexOfSelectedOption].classList.remove('choosely-selected-option');\n                this.state.FilteredOptions[indexOfSelectedOption - 1].classList.add('choosely-selected-option');\n                this.Select(this.state.FilteredOptions[indexOfSelectedOption - 1]);\n              }\n            } else if (event.keyCode === 13) {\n              this.Close();\n            }\n          }\n        });\n      }\n\n      return this;\n    } catch (err) {\n      console.error(err, 'Choosely.js');\n    } finally {\n      this.onInit();\n    }\n  }\n  /**\r\n   * @param {HTMLElement} option\r\n   */\n\n\n  Select(option) {\n    this.state.Options.forEach(_option => _option.classList.remove('choosely-selected-option'));\n    option.classList.add('choosely-selected-option');\n    this.state.Selected.innerText = option.innerText;\n    this.onSelect();\n  }\n\n  Open() {\n    this.chooselyElement.classList.add('c-opened');\n    this.IsOpened = true;\n    this.onOpen();\n  }\n\n  Close() {\n    this.chooselyElement.classList.remove('c-opened');\n    this.IsOpened = false;\n    this.onClose();\n  }\n\n  RefreshOptions() {\n    const temp = document.createElement('div');\n    this.state.FilteredOptions.forEach(_element => temp.appendChild(_element));\n    this.chooselyOptionsElement.innerHTML = '';\n    this.state.FilteredOptions.forEach(_element => this.chooselyOptionsElement.appendChild(_element));\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ });