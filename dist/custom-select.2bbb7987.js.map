{"version":3,"sources":["custom-select.js"],"names":["createElementFromHTML","htmlString","div","document","createElement","innerHTML","trim","firstChild","createAttributesFromObject","attrObject","Object","values","map","value","nodeName","nodeValue","join","createAttributesFromAttributeList","attrArray","includes","Choosely","selector","target","undefined","searchable","inheritAttributes","state","_selected","Selected","new_selected","_options","Options","new_options","_filteredOptions","FilteredOptions","FilteredOption","_isOpened","IsOpened","_sourceElement","querySelector","Error","sourceElement","_targetElement","targetElement","parentElement","options","querySelectorAll","_element","innerText","renderOptions","Array","isArray","from","_option","text","_clone","cloneNode","classList","add","attributes","appendChild","chooselyElement","optionElements","addEventListener","toggle","forEach","Close","event","keyword","remove","err","console","error","option","selector1","Select","log"],"mappings":"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","file":"custom-select.2bbb7987.js","sourceRoot":"..","sourcesContent":["function createElementFromHTML(htmlString) {\r\n    var div = document.createElement('div');\r\n    div.innerHTML = htmlString.trim();\r\n\r\n    // Change this to div.childNodes to support multiple top-level nodes\r\n    return div.firstChild;\r\n}\r\n\r\nfunction createAttributesFromObject(attrObject) {\r\n    return Object.values(attrObject)\r\n        .map((value) => `${value.nodeName}=\"${value.nodeValue}\"`)\r\n        .join(' ');\r\n}\r\n\r\nfunction createAttributesFromAttributeList(attrObject, attrArray) {\r\n    return Object.values(attrObject)\r\n        .map((value) => {\r\n            if (attrArray.includes(value.nodeName)) {\r\n                return `${value.nodeName}=\"${value.nodeValue}\"`;\r\n            }\r\n        })\r\n        .join(' ');\r\n}\r\n\r\nclass Choosely {\r\n    constructor({\r\n        selector,\r\n        target = undefined,\r\n        searchable = false,\r\n        inheritAttributes = false\r\n    }) {\r\n        this.state = {\r\n            _selected: null,\r\n            set Selected(new_selected) {\r\n                this._selected = new_selected;\r\n            },\r\n            get Selected() {\r\n                return this._selected;\r\n            },\r\n            _options: [],\r\n            set Options(new_options) {\r\n                this._options = new_options;\r\n            },\r\n            get Options() {\r\n                return this._options;\r\n            },\r\n            _filteredOptions: [],\r\n            set FilteredOptions(value) {\r\n                this._filteredOptions = value;\r\n            },\r\n            get FilteredOption() {\r\n                return this._filteredOptions;\r\n            },\r\n            _isOpened: false,\r\n            set IsOpened(value) {\r\n                this._isOpened = value;\r\n            },\r\n            get IsOpened() {\r\n                return this._isOpened;\r\n            }\r\n        };\r\n\r\n        try {\r\n            const _sourceElement = document.querySelector(selector);\r\n            if (_sourceElement) {\r\n                this.sourceElement = _sourceElement;\r\n            } else {\r\n                throw new Error(\r\n                    `Source element doesn't exist. Selector: ${selector}`\r\n                );\r\n            }\r\n\r\n            // Select target HTML Element\r\n            if (target) {\r\n                const _targetElement = document.querySelector(target);\r\n                if (_targetElement) {\r\n                    this.targetElement = _targetElement;\r\n                } else {\r\n                    throw new Error(\r\n                        `Target element doesn't exist. Selector: ${target}`\r\n                    );\r\n                }\r\n            } else {\r\n                const _targetElement = this.sourceElement.parentElement;\r\n                if (_targetElement) {\r\n                    this.targetElement = _targetElement;\r\n                } else {\r\n                    throw new Error(\r\n                        `Source element doesn't have parent elements. Please define target element.`\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Render choosely\r\n            const options = this.sourceElement.querySelectorAll('option');\r\n\r\n            const renderOptions = () => {\r\n                if (inheritAttributes) {\r\n                    if (\r\n                        typeof inheritAttributes === 'object' &&\r\n                        Array.isArray(inheritAttributes)\r\n                    ) {\r\n                        // Array\r\n                        return Array.from(options).map((_option) => {\r\n                            const text = _option.innerText;\r\n\r\n                            const _clone = _option.cloneNode();\r\n                            _clone.classList.add('choosely-option');\r\n                            const attributes = _clone.attributes;\r\n\r\n                            return `<div ${createAttributesFromAttributeList(\r\n                                attributes,\r\n                                inheritAttributes\r\n                            )} ${\r\n                                !inheritAttributes.includes('class')\r\n                                    ? 'class=\"choosely-option\"'\r\n                                    : ''\r\n                            }>${text}</div>`;\r\n                        });\r\n                    } else if (typeof inheritAttributes === 'boolean') {\r\n                        // True\r\n                        return Array.from(options).map((_option) => {\r\n                            const text = _option.innerText;\r\n\r\n                            const _clone = _option.cloneNode();\r\n                            _clone.classList.add('choosely-option');\r\n                            const attributes = _clone.attributes;\r\n\r\n                            return `<div ${createAttributesFromObject(\r\n                                attributes\r\n                            )} >${text}</div>`;\r\n                        });\r\n                    } else {\r\n                        // Invalid type\r\n                        throw new Error(\r\n                            `Invalid type for inheritAttributes property.`\r\n                        );\r\n                    }\r\n                } else {\r\n                    // False\r\n                    return Array.from(options).map((_option) => {\r\n                        const text = _option.innerText;\r\n\r\n                        return `<div class=\"choosely-option'>${text}</div>`;\r\n                    });\r\n                }\r\n            };\r\n\r\n            const html = `\r\n                <div class=\"choosely-select\">\r\n                    <div class=\"choosely-selected\">\r\n                        ${options[0].innerText}\r\n                    </div>\r\n                    <div class=\"choosely-option-container\">\r\n                        ${\r\n                            searchable\r\n                                ? `\r\n                            <div class=\"choosely-search\">\r\n                                <input type=\"search\" autocomplete=\"off\">\r\n                            </div>`\r\n                                : ``\r\n                        }\r\n                        ${renderOptions().join('')}\r\n                    </div>\r\n                </div >\r\n                `;\r\n            const _element = createElementFromHTML(html);\r\n            this.targetElement.appendChild(_element);\r\n\r\n            this.chooselyElement = _element;\r\n            this.state.Selected = _element.querySelector('.choosely-selected');\r\n            this.state.Options = _element.querySelectorAll('.choosely-option');\r\n\r\n            const optionElements = this.chooselyElement.querySelectorAll(\r\n                '.choosely-option'\r\n            );\r\n            this.state.Selected.addEventListener('click', () => {\r\n                this.chooselyElement.classList.toggle('c-opened');\r\n            });\r\n            optionElements.forEach((_option) => {\r\n                _option.addEventListener('click', () => {\r\n                    this.state.Selected.innerText = _option.innerText;\r\n                    this.Close();\r\n                });\r\n            });\r\n            if (searchable) {\r\n                const searchElement = this.chooselyElement.querySelector(\r\n                    '.choosely-search > input'\r\n                );\r\n                searchElement.addEventListener('input', (event) => {\r\n                    const keyword = event.target.value;\r\n                    this.state.Options.forEach((_option) => {\r\n                        if (!_option.innerText.includes(keyword)) {\r\n                            _option.classList.add('hidden');\r\n                        } else {\r\n                            _option.classList.remove('hidden');\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            return this;\r\n        } catch (err) {\r\n            console.error(err, 'Choosely.js');\r\n        }\r\n    }\r\n    /**\r\n     * @param {HTMLElement} option\r\n     */\r\n    Select(option) {}\r\n    Open() {\r\n        this.chooselyElement.classList.add('c-opened');\r\n    }\r\n    Close() {\r\n        this.chooselyElement.classList.remove('c-opened');\r\n    }\r\n}\r\n\r\nconst selector1 = new Choosely({\r\n    selector: 'form .form-item.form-type-select select',\r\n    searchable: true,\r\n    inheritAttributes: ['value', 'style'] // default false\r\n});\r\n\r\nselector1.Select();\r\n\r\nconsole.log(selector1);\r\n"]}